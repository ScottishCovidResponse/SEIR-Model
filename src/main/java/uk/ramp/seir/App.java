/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package uk.ramp.seir;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import uk.ramp.seir.io.CompartmentWriter;
import uk.ramp.seir.io.PropertiesReader;
import uk.ramp.seir.ode.OdeProperties;
import uk.ramp.seir.population.CompartmentRecord;
import uk.ramp.seir.population.ImmutableCompartmentRecord;

import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.*;

import static uk.ramp.seir.ode.OdeEquations.*;


public class App {
    private static final Logger LOGGER = LogManager.getLogger(App.class);
    Map<Integer, CompartmentRecord> records = new HashMap<>();

    public static void main(String[] args) throws IOException {

        App app = new App();
        app.run();

    }

    void run() throws IOException {

        PropertiesReader reader = new PropertiesReader("odeProperties.json", "properties.json");

        int t0 = reader.getT0();
        int tMax = reader.gettMax();

        OdeProperties props = reader.getOdeProperties();
        CompartmentRecord population = reader.getInitialPopulation();

        LOGGER.info("{}   {}   {}   {}   {}", t0, population.s(), population.e(), population.a(), population.r());

        calculate(tMax, props, population);

        Writer writer = new FileWriter("Compartments.csv");

        List<CompartmentRecord> list = new ArrayList<>(records.values());
        list.sort(Comparator.comparingInt(CompartmentRecord::time));
        new CompartmentWriter().write(writer, list);

    }

    void calculate(int tMax, OdeProperties props, CompartmentRecord pop) {

        for (int t = 0; t < tMax; t++) {

            records.put(t, pop);

            double dsDt = dSdT(props, pop);
            double deDt = dEdT(props, pop);
            double diDt = dIdT(props, pop);
            double dpDt = dpDt(props, pop);
            double dSymDt = dSymDt(props, pop);
            double dSymSevDt = dSymSevDt(props, pop);
            double dDDt = dDDt(props, pop);
            double drDt = dRdt(props, pop);


            double n = pop.n();
            double s = pop.s() + dsDt;
            double e = pop.e() + deDt;
            double i = pop.a() + diDt;
            double p = pop.p() + dpDt;
            double sym = pop.sym() + dSymDt;
            double ss = pop.sev() + dSymSevDt;
            double d = pop.d() + dDDt;
            double r = pop.r() + drDt;

            LOGGER.info("{}   {}   {}   {}   {}   {}   {}   {}   {}   {}", t + 1, s, e, i, r, p, sym, ss, d, n);

            pop = ImmutableCompartmentRecord.builder().time(t + 1).n(n).s(s).e(e).a(i).p(p).sym(sym).sev(ss).d(d).r(r).build();

        }
    }


}
